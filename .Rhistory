#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
source("utils/fun_read_list.R")
source("utils/parse_flexible_date.R")
source("utils/culex_sheet_clean.R")
source("utils/filter_culex_sheet.R")
source("utils/plot_culex_sheet_abundance.R")
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O N F I G  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define inputs and paramters that can be updated by the user
if(!exists("config")) {
source("config/config_combine_culex_sheet.R")
cat("\n Config defined in config/config_combine_culex_sheet.R \n")
} else {
cat("\nconfig has been defined in pipeline outside of this script.\n")
}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O M P I L E  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#run functions using user defined parameters from the config file
# R U N   R E A D &  C O M B I N E
data0 = fun_read_list(config$pattern)
# R U N   C L E A N
data = culex_sheet_clean(data0)
#REMOVE TRAPS THAT ARE NOT ONES WE TEST
# R U N   F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_foco_trap, "\n")
foco_trap = read.csv(config$fn_foco_trap)
data_filtered = filter_culex_sheet(df = data,
na_col = trap_id,
trap_keep_df = foco_trap)
cat("\n Saving culex sheet trap level data to", config$output, "\n")
write.csv(data_filtered, config$output)
# R U N   P L O T T I N G
p <- plot_abundance_by_zone(data_filtered, filter_zone = config$filter_zone)
ggsave(filename = "3_output/culex_sheet_combined_abundance.png", plot = p,
width = 5, height = 3, units = "in")
write.csv(data_filtered, config$output)
# this script is to add the total mosquito numbers by trap that are provided by VDCI
#in a spreadsheet called Culex that is separate from the pool level data.
#this was brought to my attention by the fact that abundance numbers were so much lower in 2023 based off pooling data
#compared to this trap data sheet because they were only sending a portion of the total.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#-------------------- S E T   E N V I R O N M E N T -------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
source("utils/fun_read_list.R")
source("utils/parse_flexible_date.R")
source("utils/culex_sheet_clean.R")
source("utils/filter_culex_sheet.R")
source("utils/plot_culex_sheet_abundance.R")
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O N F I G  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define inputs and paramters that can be updated by the user
if(!exists("config")) {
source("config/config_combine_culex_sheet.R")
cat("\n Config defined in config/config_combine_culex_sheet.R \n")
} else {
cat("\nconfig has been defined in pipeline outside of this script.\n")
}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O M P I L E  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#run functions using user defined parameters from the config file
# R U N   R E A D &  C O M B I N E
data0 = fun_read_list(config$pattern)
# R U N   C L E A N
data = culex_sheet_clean(data0)
#REMOVE TRAPS THAT ARE NOT ONES WE TEST
# R U N   F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_foco_trap, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data,
na_col = trap_id,
trap_keep_df = trap_keep_df)
cat("\n Saving culex sheet trap level data to", config$output, "\n")
write.csv(data_filtered, config$output)
# R U N   P L O T T I N G
p <- plot_abundance_by_zone(data_filtered, filter_zone = config$filter_zone)
ggsave(filename = "3_output/culex_sheet_combined_abundance.png", plot = p,
width = 5, height = 3, units = "in")
write.csv(data_filtered, config$output)
p
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
utils
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
# this script is to add the total mosquito numbers by trap that are provided by VDCI
#in a spreadsheet called Culex that is separate from the pool level data.
#this was brought to my attention by the fact that abundance numbers were so much lower in 2023 based off pooling data
#compared to this trap data sheet because they were only sending a portion of the total.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#-------------------- S E T   E N V I R O N M E N T -------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
suppressMessages(sapply(utils, source))
suppressMessages({sapply(utils, source)})
devtools::document()
ls
getwe()
getwd()
devtools::document()
usethis::create_package(".")
# this script is to add the total mosquito numbers by trap that are provided by VDCI
#in a spreadsheet called Culex that is separate from the pool level data.
#this was brought to my attention by the fact that abundance numbers were so much lower in 2023 based off pooling data
#compared to this trap data sheet because they were only sending a portion of the total.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#-------------------- S E T   E N V I R O N M E N T -------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O N F I G  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define inputs and paramters that can be updated by the user
if(!exists("config")) {
source("config/config_combine_culex_sheet.R") #<--------------------------------------------------------USER INPUT
cat("\n Config defined in config/config_combine_culex_sheet.R \n")
} else {
cat("\nconfig has been defined in pipeline outside of this script.\n")
}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O M P I L E  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#run functions using user defined parameters from the config file
# R E A D  &  C O M B I N E
data0 = read_list(config$pattern)
# C L E A N
data = culex_sheet_clean(data0)
#REMOVE TRAPS THAT ARE NOT ONES WE TEST
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_foco_trap, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data,
na_col = config$na_col,
trap_keep_df = trap_keep_df)
#USER INPUT
config = list(
pattern = "^(LC|Boulder).*Culex.(xlsx|csv)$", #pattern to look for in fun_read_list
fn_trap_keep  = "1_input/foco_trap.csv", #file name to be used for filtering traps if you don't want to filter by trap provide an empty dataframe
na_col = ensym(trap_id),
#output_all = "3_output/culex_sheet_combined_all.csv",
output = "3_output/culex_sheet_combined_surv_traps.csv", #output filename
filter_zone = "BC" #zone to remove for plotting abundance
)
# this script is to add the total mosquito numbers by trap that are provided by VDCI
#in a spreadsheet called Culex that is separate from the pool level data.
#this was brought to my attention by the fact that abundance numbers were so much lower in 2023 based off pooling data
#compared to this trap data sheet because they were only sending a portion of the total.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#-------------------- S E T   E N V I R O N M E N T -------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O N F I G  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define inputs and paramters that can be updated by the user
if(!exists("config")) {
source("config/config_combine_culex_sheet.R") #<--------------------------------------------------------USER INPUT
cat("\n Config defined in config/config_combine_culex_sheet.R \n")
} else {
cat("\nconfig has been defined in pipeline outside of this script.\n")
}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O M P I L E  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#run functions using user defined parameters from the config file
# R E A D  &  C O M B I N E
data0 = read_list(config$pattern)
# C L E A N
data = culex_sheet_clean(data0)
#REMOVE TRAPS THAT ARE NOT ONES WE TEST
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_foco_trap, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data,
na_col = rlang::sym(config$na_col)),
# this script is to add the total mosquito numbers by trap that are provided by VDCI
#in a spreadsheet called Culex that is separate from the pool level data.
#this was brought to my attention by the fact that abundance numbers were so much lower in 2023 based off pooling data
#compared to this trap data sheet because they were only sending a portion of the total.
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#-------------------- S E T   E N V I R O N M E N T -------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define packages to be used
rm(list = ls())
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O N F I G  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#define inputs and paramters that can be updated by the user
if(!exists("config")) {
source("config/config_combine_culex_sheet.R") #<--------------------------------------------------------USER INPUT
cat("\n Config defined in config/config_combine_culex_sheet.R \n")
} else {
cat("\nconfig has been defined in pipeline outside of this script.\n")
}
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#--------------------------------  C O M P I L E  ------------------------------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#run functions using user defined parameters from the config file
# R E A D  &  C O M B I N E
data0 = read_list(config$pattern)
# C L E A N
data = culex_sheet_clean(data0)
#REMOVE TRAPS THAT ARE NOT ONES WE TEST
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_foco_trap, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data,
na_col = rlang::sym(config$na_col),
trap_keep_df = trap_keep_df)
rlang::last_trace()
data_filtered = filter_culex_sheet(df = data,
na_col = config$na_col,
trap_keep_df = trap_keep_df)
#' Filter Culex Data Sheet
#'
#' Filters a data frame by removing rows with missing or blank values in a specified column,
#' removes duplicates, and optionally retains only rows present in a `trap_keep_df` based on that column.
#'
#' @param df A data frame containing the Culex data.
#' @param na_col The name of the column (unquoted) to check for missing or blank values.
#' @param trap_keep_df Optional. A data frame containing trap IDs to retain (must have a column matching `na_col`).
#'
#' @return A filtered data frame with informative messages printed to console.
#' @examples
#' \dontrun{
#' filter_culex_sheet(mydata, trap_id, trap_reference_df)
#' }
#' @importFrom dplyr filter distinct_all semi_join pull
#' @importFrom rlang ensym as_label quo_name
#' @export
filter_culex_sheet <- function(df, na_col, trap_keep_df = NULL) {
if(rlang::is_symbol(na_col)){
col_sym <- na_col
} else {
col_sym <- rlang::ensym(na_col)
}
col_label <- rlang::as_label(col_sym)
data <- df %>%
dplyr::filter(!is.na(!!col_sym)) %>%
dplyr::filter(nchar(!!col_sym) != 0)
cat("\nFiltered out", nrow(df) - nrow(data), "observations with missing", col_label, ",", nrow(data), "remaining.\n")
data2 <- dplyr::distinct_all(data)
cat("\nFiltered out", nrow(data) - nrow(data2), "duplicates,", nrow(data2), "remaining.\n")
if (!is.null(trap_keep_df)) {
data3 <- dplyr::semi_join(data2, trap_keep_df, by = rlang::set_names(rlang::quo_name(col_sym)))
cat("\nRemoved", nrow(data2) - nrow(data3), "observations from",
length(unique(dplyr::pull(data2, !!col_sym))) - length(unique(dplyr::pull(data3, !!col_sym))),
"non-testing traps,", nrow(data3), "observations remaining.\n")
} else {
data3 <- data2
}
return(data3)
}
data_filtered = filter_culex_sheet(df = data,
na_col = rlang::sym(config$na_col),
trap_keep_df = trap_keep_df)
#if config exists combine this with existing config
if ("config" %in% ls()) {
config <- c(config, config)
} else {
config <- config
}
View(config)
#USER INPUT
config = list(
pattern = "^(LC|Boulder).*Culex.(xlsx|csv)$", #pattern to look for in fun_read_list
fn_trap_keep  = "1_input/foco_trap.csv", #file name to be used for filtering traps if you don't want to filter by trap provide an empty dataframe
na_col = "trap_id",
#output_all = "3_output/culex_sheet_combined_all.csv",
output = "3_output/culex_sheet_combined_surv_traps.csv", #output filename
filter_zone = "BC" #zone to remove for plotting abundance
)
# Assign the config object to a global variable for convenience
assign("config", config, envir = .GlobalEnv)
#DESCRIPTION
#removes traps that aren't in the list provided by fn_trap_keep
#USER INPUT
config = list(
pattern = "^(LC|Boulder).*Culex.(xlsx|csv)$", #pattern to look for in fun_read_list
fn_trap_keep  = "1_input/foco_trap.csv", #file name to be used for filtering traps if you don't want to filter by trap provide an empty dataframe
na_col = "trap_id",
#output_all = "3_output/culex_sheet_combined_all.csv",
output = "3_output/culex_sheet_combined_surv_traps.csv", #output filename
filter_zone = "BC" #zone to remove for plotting abundance
)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#----------------------------- E X P O R T   C O N F I G ----------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
all_params <- ls(envir = .GlobalEnv)
# Create a list containing all the values of these objects
all_params_list <- mget(all_params, envir = .GlobalEnv)
saveRDS(all_params_list, config_params_file)
all_params
#DESCRIPTION
#removes traps that aren't in the list provided by fn_trap_keep
#USER INPUT
config = list(
pattern = "^(LC|Boulder).*Culex.(xlsx|csv)$", #pattern to look for in fun_read_list
fn_trap_keep  = "1_input/foco_trap.csv", #file name to be used for filtering traps if you don't want to filter by trap provide an empty dataframe
na_col = "trap_id",
#output_all = "3_output/culex_sheet_combined_all.csv",
output = "3_output/culex_sheet_combined_surv_traps.csv", #output filename
filter_zone = "BC" #zone to remove for plotting abundance
)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#----------------------------- E X P O R T   C O N F I G ----------------------------
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Create a list containing all the values of these objects
all_params_list <- mget(config, envir = .GlobalEnv)
#USER INPUT
config = list(
pattern = "^(LC|Boulder).*Culex.(xlsx|csv)$", #pattern to look for in fun_read_list
fn_trap_keep  = "1_input/foco_trap.csv", #file name to be used for filtering traps if you don't want to filter by trap provide an empty dataframe
na_col = "trap_id",
#output_all = "3_output/culex_sheet_combined_all.csv",
output = "3_output/culex_sheet_combined_surv_traps.csv", #output filename
filter_zone = "BC" #zone to remove for plotting abundance
)
saveRDS(config, "config_combine_culex_sheet.RDS")
# Create a list containing all the values of these objects
config_fn = "config_combine_culex_sheet.RDS"
saveRDS(config, config_fn)
if(file.exists(config_fn)) {
cat("config file ", config_fn, "save successfully.")
}
rm(list = ls)
rm(list = ls())
source("config/config_combine_culex_sheet.R")
rm(list = ls())
source("config/config_combine_culex_sheet.R")
source("0_R/combine_culex_sheet.R")
rm(list = ls())
source("../config/config_combine_culex_sheet.R")
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
rm(list = ls())
source("../config/config_combine_culex_sheet.R")
data0 = read_list(config$pattern)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(config$pattern)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(config$pattern)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(config$pattern)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(config$pattern)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(path = config$path, pattern = config$pattern)
data_clean = culex_sheet_clean(data0)
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_trap_keep, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(path = config$path, pattern = config$pattern)
data_clean = culex_sheet_clean(data0)
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_trap_keep, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data_clean,
na_col = rlang::sym(config$na_col),
trap_keep_df = trap_keep_df)
cat("\n Saving culex sheet trap level data to", config$output, "\n")
write.csv(data_filtered, config$output)
# P L O T
p <- plot_abundance_by_zone(data_filtered, filter_zone = config$filter_zone)
ggsave(filename = "3_output/culex_sheet_combined_abundance.png", plot = p,
width = 5, height = 3, units = "in")
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)
#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
sapply(utils, source)
source("../config/config_combine_culex_sheet.R")
data0 = read_list(path = config$path, pattern = config$pattern)
data_clean = culex_sheet_clean(data0)
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_trap_keep, "\n")
trap_keep_df = read.csv(config$fn_trap_keep)
data_filtered = filter_culex_sheet(df = data_clean,
na_col = rlang::sym(config$na_col),
trap_keep_df = trap_keep_df)
cat("\n Saving culex sheet trap level data to", config$output_df, "\n")
write.csv(data_filtered, config$output_df)
# P L O T
p <- plot_abundance_by_zone(data_filtered, filter_zone = config$filter_zone)
ggsave(filename = config$output_plot, plot = p,
width = 5, height = 3, units = "in")
