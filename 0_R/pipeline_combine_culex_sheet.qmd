
#-------------------- E N V I R O N M E N T -------------------------------------------
DESC: defines functions to be used in pipeline
```{r, echo = FALSE}

rm(list = ls())
#define packages to be used
pkg = c("dplyr", "lubridate", "purrr", "stringr", "ggplot2")
cat("\n Loading required packages: ", pkg, "\n")
pacman::p_load(pkg, character.only = T)

#USER DEFINED FUNCTIONS
utils <- list.files("../utils", pattern = "*", full.names = TRUE)
walk(utils, source)
```

#--------------------------------  C O N F I G  ------------------------------------------------
#DESC: defines variables for functions

```{r}
#source("../config/config_combine_all_mosq_sheet.R")
source("../config/config_combine_culex_sheet.R")
```

#--------------------------------  C O M P I L E  ------------------------------------------------
DESCRIPTION: combines sheets that contain config\$pattern using function read_list

DEPENDENCIES
-   CRAN
    -   dplyr
    -   rio
    -   purrr
    -   tibble
-   utils
    -   fun_read_list
INPUTS
-   config
    -   pattern: pattern for culex files to use in read_list
    
```{r}
culex0 = read_list(path = config$path, 
                  pattern = config$pattern)
```

#--------------------------------  C L E A N  ------------------------------------------------
DESCRIPTION: cleans combined sheets using wnv_s_clean and parse_flexible_date
DEPENDENCIES
-   CRAN
    -   dplyr
    -   lubridate
    -   purrr
    -   ggplot2
-   utils
    -   fun_wnv_s_clean
    -   fun_parse_flexible_date
INPUTS
-   df: dataframe from culex sheets

```{r}
keychain = read.csv("../1_input/database_column_rename.csv")

culex_clean = culex0 %>% 
  key_rename() %>%
  wnv_s_clean()


write.csv(culex_clean, config$output_culex)

#checked to ensure that data0$trap_type == method and it held true for str_detect(trap_id, "gr) == "G

``` 

#--------------------------------  F I L T E R  ------------------------------------------------
DESCRIPTION: filters cleaned_culex_sheet by a na_col and from a list of traps that you want to keep
DEPENDENCIES
-   CRAN
    -   dplyr
    -   lubridate
    -   purrr
    -   ggplot2
-   utils
    -   filter_culex_sheet
INPUTS
-   df: dataframe output from wnv_s_clean
-   config$fn_trap_keep: filename for the dataframe that contains the traps that you want to keep
-   trap_keep_df: dataframe that contains a column called trap_id that you want to keep from from the culex_sheets

```{r}
# F I L T E R
cat("\n Reading in active foco traps to remove untested traps from", config$fn_trap_keep, "\n")

trap_keep_df = read.csv(config$fn_trap_keep) %>% 
  filter(active == 1)
  

culex_filtered = filter_culex_sheet(df = culex_clean, 
                                  na_col = rlang::sym(config$na_col), 
                                  trap_keep_df = trap_keep_df)
rename_columns_from_df <- function(df, rename_df, drop_extra = FALSE) {
  # Ensure proper column names
  if (!all(c("old_name", "new_name") %in% names(rename_df))) {
    stop("rename_df must contain columns: 'old_name' and 'new_name'")
  }

  # Filter to only applicable old names in df
  valid_map <- rename_df %>%
    filter(old_name %in% names(df))

  # Build rename pairs: new = old
  rename_pairs <- setNames(valid_map$old_name, valid_map$new_name)

  # Apply renaming
  df_renamed <- df %>%
    dplyr::rename(!!!rename_pairs)

  # Optionally drop unmatched columns
  if (drop_extra) {
    df_renamed <- dplyr::select(df_renamed, dplyr::all_of(valid_map$new_name))
  }

  return(df_renamed)
}


plot_n_trap(culex_filtered, config$filter_zone) +
  ggtitle("Number of traps in Culex Sheet per Week")
ggsave(filename = "../3_output/n_trap_per_wk_culex_sheet.png")

skimr::skim(culex_filtered)

write.csv(culex_filtered, config$output_culex)
```

#------------------------ R E F O R M A T   D A T A S H E E T -------------------------------------
DESCRIPTION: we only have culex sheets from 2019 to 2024 and CDC didn't send culex sheets so we need to reformat
the wnv-s_database that has pooled data to get the missing data

DEPENDENCIES
-   CRAN
    -   dplyr
-   utils
    -   reformat_database
INPUTS
-   config$fn_database: filename for the csv that has the wnv-s_database

```{r}
database = read.csv(config$fn_database)

database_reformat = reformat_database_2_culex_sheet(database)
```

#------------------------ B I N D   D A T A S H E E T  &  C U L E X -------------------------------------
DESCRIPTION: bind the culex data with the wnv-s_database that has been reformatted to match the culex sheet
in order to visualize the difference in mosquito numbers between the culex sheet (trap data) and the
database (pool data)

DEPENDENCIES
-   CRAN
    -   dplyr
    -   ggplot2
-   utils
    -   bind_culex_sheets
    -   plot_culex_datasheet_comp
INPUTS
-   culex_filtered:culex sheet that only has the active traps in surveillance
-   data_reformat: the wnv-s_database that has been reformatted

```{r}
culex_database_bind = bind_culex_sheets(culex_filtered, #culex sheet
                                  database_reformat) #datasheet formatted

p_comp = plot_culex_datasheet_comp(culex_database_bind %>% filter(!zone %in% config$filter_zone), #combined data
                                   2018) # year to filter for
p_comp

ggsave(plot = p_comp, filename = "../3_output/culex_v_datasheet.png")
```

#------------------------ J O I N   D A T A S H E E T  &  C U L E X -------------------------------------
DESCRIPTION: join the culex data with the wnv-s_database that has been reformatted to match the culex sheet
in order to visualize the difference in mosquito numbers between the culex sheet (trap data) and the
database (pool data)

DEPENDENCIES
-   CRAN
    -   dplyr
    -   ggplot2
-   utils
    -   join_merge_z
    -   plot_culex_datasheet_comp
INPUTS
-   culex_filtered:culex sheet that only has the active traps in surveillance
-   data_reformat: the wnv-s_database that has been reformatted


```{r}
#joins 
culex_database = join_merge_z(culex_filtered, database_reformat, "total")

write.csv(culex_database$full, config$output_culex_database)

```


#------------------------ G E T   N A  C U L E X   T R A P  -------------------------------------
DESCRIPTION: using the foco_trap get the NA traps from the culex sheet to test the completeness of those sheets

DEPENDENCIES
-   CRAN
    -   dplyr
    -   ggplot2
-   utils
    -   bind_culex_sheets
INPUTS
-   data_filtered:
-   data_reformat: the wnv-s_database that has been reformatted

```{r}
y = lubridate::year(Sys.Date())-1
BE_rm = c("LC-061", "LC-058", "LC-062", "LC-059", "LC-060") #remove the traps cdc sent us and weren't managed by VDCI at the time

trap_active_df = trap_keep_df %>%
  filter(active == 1) %>%
  filter(!trap_id %in% BE_rm) %>%
  mutate(end = y,
         w_start = 23,
         w_end = 37)

trap_expand = rowwise_expand(trap_active_df, "start", "end", "year")
trap_expand = rowwise_expand(trap_expand, "w_start", "w_end", "week")
trap_expand = trap_expand %>%
  mutate(week = week,
         year = year) %>%
  select(trap_id, zone, year, week)

na_trap = anti_join(trap_expand, culex_clean, 
                    by = c("trap_id", "year", "week")) %>%
  mutate(zone = if_else(zone %in% config$fc_zone, "FC", zone)) %>%
  filter(year > 2018) %>%
  filter(zone %in% c("FC", "LV"))

p_na_trap = plot_n(na_trap, trap_id) +
  ggtitle("Number of weeks trap is missing. 2019-2024")

p_na_trap

ggsave(plot = p_na_trap, filename = "../3_output/na_trap.png")
```



#------------------------ A D D   N A  C U L E X   T R A P  -------------------------------------
DESCRIPTION: using the foco_trap get the NA traps from the culex sheet to test the completeness of those sheets

DEPENDENCIES
-   CRAN
    -   dplyr
    -   ggplot2
-   utils
    -   bind_culex_sheets
INPUTS
-   data_filtered:
-   data_reformat: the wnv-s_database that has been reformatted

```{r}
y = lubridate::year(Sys.Date())

trap_active_df = trap_keep_df %>%
  filter(active == 1) %>%
  mutate(end = y,
         w_start = 23,
         w_end = 37)

trap_expand = rowwise_expand(trap_active_df, "start", "end", "year")
trap_expand = rowwise_expand(trap_expand, "w_start", "w_end", "week")
trap_expand = trap_expand %>%
  mutate(week = week,
         year = year) %>%
  select(trap_id, zone, year, week)



culex_database_expand = left_join(trap_expand, culex_database$final, 
                    by = colnames(trap_expand))

#remove years and trap ids where we have no data which indicates the traps didn't exist yet or we don't have any data
culex_database_expand = culex_database_expand %>%
  #rm_grp_na(c("year", "week", "zone"), "total") %>%
  mutate(total = replace_na(total, 0)) %>%
  mutate(spp = replace_na(spp, "No Mosquitoes")) %>%
  group_by(year, week, zone) %>%
  fill(trap_date, .direction = "downup") %>%
  ungroup() %>%
  wnv_s_clean()


t = culex_database_expand %>% 
  dplyr::mutate(zone = dplyr::if_else(zone %in% c("NW", "SW", "NE", "SE"), 
                                    "FC", 
                                    zone)) %>%
    filter(!zone %in% NULL) %>%
    group_by(year, week, zone) %>%
    summarise(n = n_distinct(trap_id),
              .groups = "drop") %>%
  filter(zone == "FC" & n != 53)

t2 = culex_database_expand %>% filter(zone %in% c("NW", "SW", "NE", "SE") & year == 2020 & week == 23)


p_trap_n = plot_n_trap(culex_database_expand) +
  ggtitle("N traps by Zone")

p_trap_n

```




